name: APIM PR review

on:
  push:
    branches: 
      - main
    pull_request:
    paths:
      - 'apim/*'
      - '.github/workflows/apim-deployment.yaml'
#  workflow_dispatch:

jobs:
  validate-infrastructure:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: apim

    env:
      ARM_CLIENT_ID: ${{secrets.TF_ARM_CLIENT_ID}}
      ARM_CLIENT_SECRET: ${{secrets.TF_ARM_CLIENT_SECRET}}
      ARM_SUBSCRIPTION_ID: ${{secrets.SUBSCRIPTION_ID}}
      ARM_TENANT_ID: ${{secrets.TENANT_ID}}

    steps:
      - uses: actions/checkout@v2

      - name: Set env
        id: step_one
        run: |
          echo "TF_BACKEND_CONTAINER_NAME=${{ github.ref_name }}-tfapim" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        run: terraform init -backend-config=container_name=$TF_BACKEND_CONTAINER_NAME

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: terraform plan -no-color -input=false -var-file apim.tfvars -var="environment=${{ github.ref_name }}"
        continue-on-error: true

      - name: Update Pull Request
        uses: actions/github-script@6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1